#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build releases

on:
  workflow_dispatch:
  # schedule:
    # - cron: 0 17 * * *
  # watch:
  #   types: started
    inputs:
      device:
        description: 'Select the build device'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'rockchip'
      lan_addr:
        description: 'Setting default LAN address'
        required: true
        default: '10.0.0.1'
        type: string
      ccache:
        description: 'Enable ccache (Use Cache to speed up next build)'
        type: boolean
        default: true

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v24.10.1
  CONFIG_FILE: configs/${{ github.event.inputs.device }}.config
  DIY_SCRIPT: diy-${{ github.event.inputs.device }}.sh
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ${{ github.event.inputs.device }}-OpenWrt
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-24.04

    steps: 
    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        
    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo
        
    - name: Free disk space
      uses: zhiern/actions@free-disk

    - name: Checkout
      uses: actions/checkout@main

    - name: Build System Setup
      uses: zhiern/actions@openwrt-build-setup

    - name: Install LLVM
      uses: zhiern/actions@install-llvm
                
    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        git clone -b openwrt-24.10 --single-branch --filter=blob:none https://github.com/openwrt/openwrt openwrt_snap
        find openwrt/package/* -maxdepth 0 ! -name 'firmware' ! -name 'kernel' ! -name 'base-files' ! -name 'Makefile' -exec rm -rf {} +
        rm -rf ./openwrt_snap/package/firmware ./openwrt_snap/package/kernel ./openwrt_snap/package/base-files ./openwrt_snap/package/Makefile
        cp -rf ./openwrt_snap/package/* ./openwrt/package/
        curl -o ./openwrt/feeds.conf.default https://script.kejizero.online/Customize/feeds/feeds.conf.default
        rm -rf ./openwrt_snap
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "CURRENT_DATE=$(date +%s)" >> $GITHUB_ENV
        
    - name: Generate Variables
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        
    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Add device support
      if: ${{ github.event.inputs.device == 'rockchip' }}
      run: |
        git clone -b v24.10.1 --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt
        cd $OPENWRT_PATH
        rm -rf target/linux/rockchip
        cp -rf ../immortalwrt/target/linux/rockchip target/linux/rockchip
        pushd target/linux/rockchip/patches-6.6/
            curl -Os https://script.kejizero.online/openwrt/patch/rockchip/014-rockchip-add-pwm-fan-controller-for-nanopi-r2s-r4s.patch
            curl -Os https://script.kejizero.online/openwrt/patch/rockchip/702-general-rk3328-dtsi-trb-ent-quirk.patch
            curl -Os https://script.kejizero.online/openwrt/patch/rockchip/703-rk3399-enable-dwc3-xhci-usb-trb-quirk.patch
        popd
        rm -rf package/boot/{rkbin,uboot-rockchip,arm-trusted-firmware-rockchip}
        cp -rf ../immortalwrt/package/boot/uboot-rockchip package/boot/uboot-rockchip
        cp -rf ../immortalwrt/package/boot/arm-trusted-firmware-rockchip package/boot/arm-trusted-firmware-rockchip
        sed -i '/REQUIRE_IMAGE_METADATA/d' target/linux/rockchip/armv8/base-files/lib/upgrade/platform.sh
        
    - name: Load Custom Configuration
      run: |
        export LAN=${{ github.event.inputs.lan_addr }}
        [ ${{ github.event.inputs.ccache }} = 'true' ] && export BUILD_FAST=y
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        
    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        
    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT
        
    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Online X86_64 updates
      if: ${{ github.event.inputs.device == 'x86_64' }}
      run: |
        cd $OPENWRT_PATH
        mkdir -p ota
        OTA_URL="https://github.com/zhiern/OpenWRT/releases/download"
        SHA256=$(sha256sum bin/targets/x86/64*/zerowrt-vip-plus-x86-64-generic-squashfs-combined-efi.img.gz | awk '{print $1}')
        cat > ota/fw.json <<EOF
        {
          "x86_64": [
            {
              "build_date": "$CURRENT_DATE",
              "sha256sum": "$SHA256",
              "url": "$OTA_URL/x86_64-OpenWrt/zerowrt-vip-plus-x86-64-generic-squashfs-combined-efi.img.gz"
            }
          ]
        }
        EOF

    - name: Online Rockchip updates
      if: ${{ github.event.inputs.device == 'rockchip' }}
      run: |
        cd $OPENWRT_PATH
        mkdir -p ota
        OTA_URL="https://github.com/zhiern/OpenWRT/releases/download"
        SHA256=$(sha256sum bin/targets/rockchip/armv8*/zerowrt-vip-plus-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz | awk '{print $1}')
        cat > ota/fw.json <<EOF
        {
          "friendlyarm,nanopi-r4s": [
            {
              "build_date": "$CURRENT_DATE",
              "sha256sum": "$SHA256",
              "url": "$OTA_URL/rockchip-OpenWrt/zerowrt-vip-plus-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz"
            }
          ]
        }
        EOF
        
    - name: Organize Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        mv -f $OPENWRT_PATH/ota/* ./
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        
    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1.14.0
      with:
        name: ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 10.0.0.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
